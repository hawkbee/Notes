Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-08-30T09:53:25+08:00

====== p第五章 echo服务示例 ======
Created Thursday 30 August 2012
服务描述

服务端

客户端

正常启动

正常退出

===== 信号 =====
通过fork子进程完成服务模式，需要父进程回收子进程的进程控制块，子进程向父进程发送SIGCHLD来表明子进程运行的终结。父进程通过调用wait与waitpid方式来回收子进程的进程控制块。
'''
int wait(int *stat_loc);
int waitpid(pid_t pid, int *stat_loc, int options);
'''

wait是阻塞式的，并且每次调用只能回收一个子进程控制块，而信号只是一个标记而不是计数，在出现多个子进程同时退出时，无法得知明确的wait次数，导致wait阻塞，不能实现有效的控制。而waitpid则可以提供更灵活的控制。

===== accept返回前链接退出 =====
典型的应用场景：
1. 服务器调用listen后、accept前，客户端发出了请求，并建立链接。
2. 链接建立后，立即发送RST。（设置套接字的SO_LINGER选项）

根据协议栈的实现不同处理也相应的不同。
1. Berkeley派生的版本在协议栈中处理了这种情况，对应用是不可见的。
2. SVR4则通过errno返回EPROTO错误。
3. POSIX则规定通过errno返回ECONNABORTED


===== 服务进程异常崩溃退出（Crash） =====
进程退出时socket被正常关闭。TCP链接在关闭时，服务端发送FIN，而如果客户端没有阻塞在TCP链接上，此时只会发送一个ACK。当客户端收到FIN时会认定服务器端已关闭链接而不再发送数据，而不认为是服务器端该服务的关闭。
如果客户端继续向服务器端上的socket发送数据，将会收到RST。
	''根据客户端调用读取socket的时间不同而导致返回值不同，当客户端收到RST之前读取socket，客户端读取了一个关闭的socket（EOF）。如果在收到RST之后读取socket，读取接口将返回ECONNRESET。''
服务端发送了FIN给客户端，表明服务已经中断。

===== SIGPIPE信号 =====
当进程向收到RST的套接字写入数据时，将向进程发送SIGPIPE信号。这个信号的默认处理方式是终止进程，因此进程需要接管处理这个信号。
	''在USENET上常有人问如何在第一次写数据时获取这个信号，而不是第二次。这个问题的回答是，没有办法。第一次写会接收到RST信号，而第二次写才产生SIGPIPE信号。因为允许向接收到FIN的套接字写数据，但向接收到RST的套接字写数据则是一个错误。''


===== 服务端不可达 =====

网线断了
掉电了
服务端没有发送FIN给客户端，客户端不知道服务端不可达了。

在客户端使用select或者poll来尽快探测服务端的进程终止。
SYN
ACK
RST
FIN

